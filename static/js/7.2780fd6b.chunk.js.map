{"version":3,"sources":["selectors/requesting/RequestingSelector.ts","selectors/episodes/EpisodesSelector.ts","views/episodes-page/components/episodes-table-row/EpisodesTableRow.tsx","views/episodes-page/components/episodes-table/EpisodesTable.tsx","views/episodes-page/EpisodesPage.tsx"],"names":["RequestingSelector","requestingState","actionTypes","some","actionType","selectRequesting","createSelector","state","requesting","EpisodesSelector","episodes","seasons","groupBy","Object","entries","map","season","models","title","rows","_createTableRows","model","episode","number","name","date","dayjs","airdate","format","image","medium","selectEpisodes","shows","EpisodesTableRow","rowData","this","props","Table","Row","key","Cell","Image","src","rounded","size","React","PureComponent","EpisodesTable","tableData","Header","as","HeaderCell","width","Body","EpisodesPage","dispatch","ShowsAction","requestEpisodes","episodeTables","isRequesting","LoadingIndicator","isActive","Component","connect","ownProps","REQUEST_EPISODES"],"mappings":"wLAIaA,EAAb,8GACiCC,EAAmCC,GAChE,OAAOA,EAAYC,KAAK,SAACC,GAAD,OAAwBH,EAAgBG,SAFpE,KAMaC,EAAkEC,YAC7E,SAACC,GAAD,OAAmBA,EAAMC,YACzB,SAACD,EAAeL,GAAhB,OAA0CA,GAC1CF,EAAmBK,mB,wKCLRI,EAAb,4GAC+BC,GAC3B,IAAMC,EAAgDC,IAAQF,EAAU,UAExE,OAAOG,OAAOC,QAAQH,GAASI,IAC7B,YAAgE,IAAD,mBAA7DC,EAA6D,KAArDC,EAAqD,KAC7D,MAAO,CACLC,MAAM,UAAD,OAAYF,GACjBG,KAAMV,EAAiBW,iBAAiBH,QARlD,uCAckCA,GAC9B,OAAOA,EAAOF,IACZ,SAACM,GAAD,MAA4C,CAC1CC,QAASD,EAAME,OACfC,KAAMH,EAAMG,KACZC,KAAMC,IAAML,EAAMM,SAASC,OAAO,eAClCC,MAAOR,EAAMQ,MAAMC,cApB3B,KA0BaC,EAAoDzB,YAC/D,SAACC,GAAD,OAAmBA,EAAMyB,MAAMtB,UAC/BD,EAAiBsB,gB,6CC3BEE,E,iLACW,IACpBC,EAAYC,KAAKC,MAAjBF,QAER,OACE,kBAACG,EAAA,EAAMC,IAAP,CAAWC,IAAKL,EAAQZ,SACtB,kBAACe,EAAA,EAAMG,KAAP,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAKR,EAAQL,MAAOc,SAAS,EAAMC,KAAK,WAEjD,kBAACP,EAAA,EAAMG,KAAP,KAAaN,EAAQZ,SACrB,kBAACe,EAAA,EAAMG,KAAP,KAAaN,EAAQT,MACrB,kBAACY,EAAA,EAAMG,KAAP,KAAaN,EAAQV,W,GAXiBqB,IAAMC,eCE/BC,E,iLACW,IACpBC,EAAcb,KAAKC,MAAnBY,UAER,OACE,yBAAKT,IAAKS,EAAU9B,OAClB,kBAAC+B,EAAA,EAAD,CAAQC,GAAG,MAAMF,EAAU9B,OAC3B,kBAACmB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAMY,OAAP,KACE,kBAACZ,EAAA,EAAMC,IAAP,KACE,kBAACD,EAAA,EAAMc,WAAP,CAAkBC,MAAO,GAAzB,SACA,kBAACf,EAAA,EAAMc,WAAP,gBACA,kBAACd,EAAA,EAAMc,WAAP,aACA,kBAACd,EAAA,EAAMc,WAAP,eAGJ,kBAACd,EAAA,EAAMgB,KAAP,KACGL,EAAU7B,KAAKJ,IAAI,SAACM,GAAD,OAClB,kBAAC,EAAD,CAAkBkB,IAAKlB,EAAMC,QAASY,QAASb,a,GAlBlBwB,IAAMC,e,0CCQjD,IAKMQ,E,4LAEFnB,KAAKC,MAAMmB,SAASC,IAAYC,qB,+BAGJ,IAAD,EACatB,KAAKC,MAArCsB,EADmB,EACnBA,cAAeC,EADI,EACJA,aAEvB,OACE,oCACE,kBAACC,EAAA,EAAD,CAAkBC,SAAUF,IAC3BD,EAAc3C,IAAI,SAACM,GAAD,OACjB,kBAAC,EAAD,CAAekB,IAAKlB,EAAMH,MAAO8B,UAAW3B,W,GAZ3BwB,IAAMiB,WAoBlBC,sBAzBS,SAACxD,EAAeyD,GAAhB,MAAqD,CAC3EN,cAAe3B,EAAexB,GAC9BoD,aAActD,YAAiBE,EAAO,CAACiD,IAAYS,qBAuBtCF,CAAyBT","file":"static/js/7.2780fd6b.chunk.js","sourcesContent":["import { createSelector, ParametricSelector } from 'reselect';\nimport IRequestingState from '../../stores/requesting/models/IRequestingState';\nimport IStore from '../../models/IStore';\n\nexport class RequestingSelector {\n  public static selectRequesting(requestingState: IRequestingState, actionTypes: string[]): boolean {\n    return actionTypes.some((actionType: string) => requestingState[actionType]);\n  }\n}\n\nexport const selectRequesting: ParametricSelector<IStore, string[], boolean> = createSelector(\n  (state: IStore) => state.requesting,\n  (state: IStore, actionTypes: string[]) => actionTypes,\n  RequestingSelector.selectRequesting\n);\n","import { createSelector, Selector } from 'reselect';\nimport IStore from '../../models/IStore';\nimport EpisodeModel from '../../stores/shows/models/episodes/EpisodeModel';\nimport groupBy from 'lodash.groupby';\nimport dayjs from 'dayjs';\nimport IEpisodeTable from './models/IEpisodeTable';\nimport IEpisodeTableRow from './models/IEpisodeTableRow';\n\nexport class EpisodesSelector {\n  public static selectEpisodes(episodes: EpisodeModel[]): IEpisodeTable[] {\n    const seasons: { [season: string]: EpisodeModel[] } = groupBy(episodes, 'season');\n\n    return Object.entries(seasons).map(\n      ([season, models]: [string, EpisodeModel[]]): IEpisodeTable => {\n        return {\n          title: `Season ${season}`,\n          rows: EpisodesSelector._createTableRows(models),\n        };\n      }\n    );\n  }\n\n  private static _createTableRows(models: EpisodeModel[]): IEpisodeTableRow[] {\n    return models.map(\n      (model: EpisodeModel): IEpisodeTableRow => ({\n        episode: model.number,\n        name: model.name,\n        date: dayjs(model.airdate).format('MMM D, YYYY'),\n        image: model.image.medium,\n      })\n    );\n  }\n}\n\nexport const selectEpisodes: Selector<IStore, IEpisodeTable[]> = createSelector(\n  (state: IStore) => state.shows.episodes,\n  EpisodesSelector.selectEpisodes\n);\n","import React from 'react';\nimport { Image, Table } from 'semantic-ui-react';\nimport IEpisodeTableRow from '../../../../selectors/episodes/models/IEpisodeTableRow';\n\ninterface IProps {\n  readonly rowData: IEpisodeTableRow;\n}\ninterface IState {}\n\nexport default class EpisodesTableRow extends React.PureComponent<IProps, IState> {\n  public render(): JSX.Element {\n    const { rowData } = this.props;\n\n    return (\n      <Table.Row key={rowData.episode}>\n        <Table.Cell>\n          <Image src={rowData.image} rounded={true} size=\"small\" />\n        </Table.Cell>\n        <Table.Cell>{rowData.episode}</Table.Cell>\n        <Table.Cell>{rowData.date}</Table.Cell>\n        <Table.Cell>{rowData.name}</Table.Cell>\n      </Table.Row>\n    );\n  }\n}\n","import React from 'react';\nimport { Header, Table } from 'semantic-ui-react';\nimport EpisodesTableRow from '../episodes-table-row/EpisodesTableRow';\nimport IEpisodeTable from '../../../../selectors/episodes/models/IEpisodeTable';\nimport IEpisodeTableRow from '../../../../selectors/episodes/models/IEpisodeTableRow';\n\ninterface IProps {\n  readonly tableData: IEpisodeTable;\n}\ninterface IState {}\n\nexport default class EpisodesTable extends React.PureComponent<IProps, IState> {\n  public render(): JSX.Element {\n    const { tableData } = this.props;\n\n    return (\n      <div key={tableData.title}>\n        <Header as=\"h2\">{tableData.title}</Header>\n        <Table>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell width={1}>Scene</Table.HeaderCell>\n              <Table.HeaderCell>Episode</Table.HeaderCell>\n              <Table.HeaderCell>Date</Table.HeaderCell>\n              <Table.HeaderCell>Name</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {tableData.rows.map((model: IEpisodeTableRow) => (\n              <EpisodesTableRow key={model.episode} rowData={model} />\n            ))}\n          </Table.Body>\n        </Table>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport IStore from '../../models/IStore';\nimport ShowsAction from '../../stores/shows/ShowsAction';\nimport { selectEpisodes } from '../../selectors/episodes/EpisodesSelector';\nimport IEpisodeTable from '../../selectors/episodes/models/IEpisodeTable';\nimport { ReduxProps } from '../../models/ReduxProps';\nimport LoadingIndicator from '../components/loading-indicator/LoadingIndicator';\nimport { selectRequesting } from '../../selectors/requesting/RequestingSelector';\nimport EpisodesTable from './components/episodes-table/EpisodesTable';\n\ninterface IProps {}\ninterface IState {}\ninterface IRouteParams {}\ninterface IStateToProps {\n  readonly episodeTables: IEpisodeTable[];\n  readonly isRequesting: boolean;\n}\n\nconst mapStateToProps = (state: IStore, ownProps: IProps): IStateToProps => ({\n  episodeTables: selectEpisodes(state),\n  isRequesting: selectRequesting(state, [ShowsAction.REQUEST_EPISODES]),\n});\n\nclass EpisodesPage extends React.Component<IProps & IStateToProps & ReduxProps<any, IRouteParams>, IState> {\n  public componentDidMount(): void {\n    this.props.dispatch(ShowsAction.requestEpisodes());\n  }\n\n  public render(): JSX.Element {\n    const { episodeTables, isRequesting } = this.props;\n\n    return (\n      <>\n        <LoadingIndicator isActive={isRequesting} />\n        {episodeTables.map((model: IEpisodeTable) => (\n          <EpisodesTable key={model.title} tableData={model} />\n        ))}\n      </>\n    );\n  }\n}\n\nexport { EpisodesPage as Unconnected };\nexport default connect(mapStateToProps)(EpisodesPage);\n"],"sourceRoot":""}