{"version":3,"sources":["views/components/loading-indicator/LoadingIndicator.module.scss","views/components/loading-indicator/LoadingIndicator.tsx","views/components/toasts/Toasts.module.scss","utilities/ActionUtility.ts","utilities/BaseReducer.ts","stores/shows/ShowsReducer.ts","stores/requesting/RequestingReducer.ts","stores/error/ErrorAction.ts","stores/error/ErrorReducer.ts","stores/toasts/ToastsAction.ts","stores/toasts/ToastsReducer.ts","constants/ToastStatusEnum.ts","constants/RouteEnum.ts","middlewares/errorToastMiddleware.ts","stores/rootStore.ts","stores/rootReducer.ts","views/components/main-nav/components/MenuNavLink.tsx","views/components/main-nav/MainNav.tsx","views/components/toast-card/ToastCard.tsx","views/components/toasts/Toasts.tsx","views/App.tsx","index.tsx","models/HttpErrorResponseModel.ts","environments/production.ts","environments/base.ts","utilities/HttpUtility.ts","stores/shows/models/shows/CountryModel.ts","stores/shows/models/shows/NetworkModel.ts","stores/shows/models/ImageModel.ts","stores/shows/models/shows/ShowModel.ts","stores/shows/models/episodes/EpisodeModel.ts","stores/shows/models/cast/PersonModel.ts","stores/shows/models/cast/CharacterModel.ts","stores/shows/models/cast/CastModel.ts","utilities/EffectUtility.ts","stores/shows/ShowsEffect.ts","stores/shows/ShowsAction.ts"],"names":["module","exports","LoadingIndicator","this","props","children","isActive","className","cssClasses","classNames","styles","wrapper","loaderContainer","content","active","inverted","size","React","PureComponent","defaultProps","undefined","ActionUtility","dispatch","actionType","effect","args","createAction","model","isError","HttpErrorResponseModel","type","payload","error","meta","BaseReducer","initialState","reducer","state","action","method","call","ShowsAction","REQUEST_SHOW_FINISHED","REQUEST_EPISODES_FINISHED","REQUEST_CAST_FINISHED","ShowsReducer","currentShowId","show","episodes","actors","RequestingReducer","isRequestType","includes","requestName","replace","isFinishedRequestType","ErrorAction","id","REMOVE","CLEAR_ALL","ErrorReducer","Object","entries","reduce","newState","key","value","isStartRequestType","stateWithoutFinishedType","Boolean","ToastsAction","message","ADD_TOAST","uuid","toastId","REMOVE_TOAST","ToastStatusEnum","ToastsReducer","items","filter","RouteEnum","errorToastMiddleware","store","next","errorAction","add","Error","history","middleware","environment","isDevelopment","reduxFreeze","thunk","routerMiddleware","createStore","reducerMap","requesting","router","connectRouter","shows","toasts","combineReducers","rootReducer","composeWithDevTools","applyMiddleware","MenuNavLink","exact","activeClassName","MainNav","Segment","Menu","pointing","secondary","Item","as","to","Home","name","Episodes","About","ToastCard","buttonColorMap","Warning","Success","_onClickRemoveNotification","event","data","removeById","item","buttonColor","Card","Content","Header","Description","extra","Button","color","onClick","connect","ownProps","Toasts","length","map","Component","HomePage","lazy","NotFoundPage","EpisodesPage","AboutPage","App","fallback","path","component","window","a","createBrowserHistory","basename","route","baseRoute","rootStore","rootEl","document","getElementById","el","ReactDOM","render","status","errors","url","raw","env","baseApi","api","cast","errorExample","isProduction","RequestMethod","HttpUtility","endpoint","params","requestConfig","paramsConfig","_request","Get","config","Post","Put","Delete","restRequest","console","axiosRequestConfig","headers","oc","Promise","all","axios","_delay","axiosResponse","request","success","_fillInErrorWithDefaults","join","responseURL","response","statusText","hasOwnProperty","duration","resolve","setTimeout","CountryModel","code","timezone","update","BaseModel","NetworkModel","country","ImageModel","medium","original","ShowModel","summary","genres","network","image","EpisodeModel","season","number","airdate","PersonModel","birthday","CharacterModel","CastModel","person","character","self","voice","EffectUtility","Model","get","_restModelCreator","post","Array","isArray","json","ShowsEffect","showId","getToModel","getState","createThunkEffect","REQUEST_SHOW","requestShow","REQUEST_EPISODES","requestEpisodes","REQUEST_CAST","requestCast","REQUEST_ERROR","requestError","REQUEST_ERROR_FINISHED"],"mappings":"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","file":"static/js/main.2142b9c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"LoadingIndicator_wrapper__3M33C\",\"loaderContainer\":\"LoadingIndicator_loaderContainer__A450d\"};","import styles from './LoadingIndicator.module.scss';\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Loader } from 'semantic-ui-react';\n\ninterface IProps {\n  readonly isActive?: boolean;\n  readonly className?: string;\n}\ninterface IState {}\n\nexport default class LoadingIndicator extends React.PureComponent<IProps, IState> {\n  public static defaultProps: IProps = {\n    isActive: false,\n    className: undefined,\n  };\n\n  public render(): JSX.Element {\n    const { children, isActive, className } = this.props;\n    const cssClasses: string = classNames(className, {\n      [styles.wrapper]: isActive,\n    });\n\n    return (\n      <div className={cssClasses}>\n        {isActive && (\n          <div className={styles.loaderContainer}>\n            <Loader content=\"Loading\" active={true} inverted={true} size=\"huge\" />\n          </div>\n        )}\n        {children}\n      </div>\n    );\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Toasts_wrapper__17gGv\"};","import { ReduxDispatch } from '../models/ReduxProps';\nimport HttpErrorResponseModel from '../models/HttpErrorResponseModel';\nimport IAction from '../models/IAction';\n\nexport default class ActionUtility {\n  public static async createThunkEffect<P>(\n    dispatch: ReduxDispatch<undefined | P | HttpErrorResponseModel>,\n    actionType: string,\n    effect: (...args: any[]) => Promise<P | HttpErrorResponseModel>,\n    ...args: any[]\n  ): Promise<P | HttpErrorResponseModel> {\n    dispatch(ActionUtility.createAction<undefined>(actionType));\n\n    const model: P | HttpErrorResponseModel = await effect(...args);\n    const isError: boolean = model instanceof HttpErrorResponseModel;\n\n    dispatch(ActionUtility.createAction<P | HttpErrorResponseModel>(`${actionType}_FINISHED`, model, isError));\n\n    return model;\n  }\n\n  public static createAction<T = undefined>(type: string, payload?: T, error: boolean = false, meta: any = null): IAction<T> {\n    return { type, payload, error, meta };\n  }\n}\n","import IAction from '../models/IAction';\n\ntype ReducerMethod<T> = (state: T, action: IAction<any>) => T;\n\nexport default abstract class BaseReducer<T> {\n  public initialState: T = {} as any;\n\n  public reducer = (state: T = this.initialState, action: IAction<any>): T => {\n    // if the action type is used for a method name then this be a reference to\n    // that class method.\n    // if the action type is not found then the \"method\" const will be undefined.\n    const method: ReducerMethod<T> | undefined = this[action.type];\n\n    // if the action type \"method\" const is undefined or the action is an error\n    // return the state.\n    if (!method || action.error) {\n      return state;\n    }\n\n    // Calls the method with the correct \"this\" and returns the modified state.\n    return method.call(this, state, action);\n  };\n}\n","import BaseReducer from '../../utilities/BaseReducer';\nimport IShowsState from './models/IShowsState';\nimport ShowsAction from './ShowsAction';\nimport IAction from '../../models/IAction';\nimport ShowModel from './models/shows/ShowModel';\nimport EpisodeModel from './models/episodes/EpisodeModel';\nimport CastModel from './models/cast/CastModel';\n\nexport default class ShowsReducer extends BaseReducer<IShowsState> {\n  public readonly initialState: IShowsState = {\n    currentShowId: '74',\n    show: null,\n    episodes: [],\n    actors: [],\n  };\n\n  public [ShowsAction.REQUEST_SHOW_FINISHED](state: IShowsState, action: IAction<ShowModel>): IShowsState {\n    return {\n      ...state,\n      show: action.payload!,\n    };\n  }\n\n  public [ShowsAction.REQUEST_EPISODES_FINISHED](state: IShowsState, action: IAction<EpisodeModel[]>): IShowsState {\n    return {\n      ...state,\n      episodes: action.payload!,\n    };\n  }\n\n  public [ShowsAction.REQUEST_CAST_FINISHED](state: IShowsState, action: IAction<CastModel[]>): IShowsState {\n    return {\n      ...state,\n      actors: action.payload!,\n    };\n  }\n}\n","/*\n * Note: This reducer breaks convention on how reducers should be setup.\n */\nimport IRequestingState from './models/IRequestingState';\nimport IAction from '../../models/IAction';\n\nexport default class RequestingReducer {\n  public static readonly initialState: IRequestingState = {};\n\n  public static reducer(state: IRequestingState = RequestingReducer.initialState, action: IAction<any>): IRequestingState {\n    // We only take actions that include 'REQUEST_' in the type.\n    const isRequestType: boolean = action.type.includes('REQUEST_');\n\n    if (isRequestType === false) {\n      return state;\n    }\n\n    // Remove the string '_FINISHED' from the action type so we can use the first part as the key on the state.\n    const requestName: string = action.type.replace('_FINISHED', '');\n    // If the action type includes '_FINISHED'. The boolean value will be false. Otherwise we\n    // assume it is a starting request and will be set to true.\n    const isFinishedRequestType: boolean = action.type.includes('_FINISHED');\n\n    return {\n      ...state,\n      [requestName]: isFinishedRequestType === false,\n    };\n  }\n}\n","import IAction from '../../models/IAction';\nimport ActionUtility from '../../utilities/ActionUtility';\n\nexport default class ErrorAction {\n  public static readonly CLEAR_ALL: string = 'ErrorAction.CLEAR_ALL';\n  public static readonly REMOVE: string = 'ErrorAction.REMOVE';\n\n  public static removeById(id: string): IAction<string> {\n    return ActionUtility.createAction(ErrorAction.REMOVE, id);\n  }\n\n  public static clearAll(): IAction<undefined> {\n    return ActionUtility.createAction(ErrorAction.CLEAR_ALL);\n  }\n}\n","/*\n * Note: This reducer breaks convention on how reducers should be setup.\n */\nimport IErrorState from './models/IErrorState';\nimport IAction from '../../models/IAction';\nimport ErrorAction from './ErrorAction';\nimport HttpErrorResponseModel from '../../models/HttpErrorResponseModel';\n\nexport default class ErrorReducer {\n  public static readonly initialState: IErrorState = {};\n\n  public static reducer(state: IErrorState = ErrorReducer.initialState, action: IAction<any>): IErrorState {\n    const { type, error, payload } = action;\n\n    /*\n     * Removes an HttpErrorResponseModel by it's id that is in the action payload.\n     */\n    if (type === ErrorAction.REMOVE) {\n      // Create a new state without the error that has the same id as the payload.\n      return Object.entries(state).reduce((newState: object, [key, value]: [string, HttpErrorResponseModel]) => {\n        if (value.id !== payload) {\n          newState[key] = value;\n        }\n\n        return newState;\n      }, {});\n    }\n\n    /*\n     * Removes all errors by returning the initial state which is an empty object.\n     */\n    if (type === ErrorAction.CLEAR_ALL) {\n      return ErrorReducer.initialState;\n    }\n\n    /*\n     * True if the action type has the key word '_FINISHED' then the action is finished.\n     */\n    const isFinishedRequestType = type.includes('_FINISHED');\n    /*\n     * True if the action type has the key word 'REQUEST_' and not '_FINISHED'.\n     */\n    const isStartRequestType = type.includes('REQUEST_') && !isFinishedRequestType;\n\n    /*\n     * If an action is started we want to remove any old errors because there is a new action has been re-dispatched.\n     */\n    if (isStartRequestType) {\n      // Using ES7 Object Rest Spread operator to omit properties from an object.\n      const { [`${type}_FINISHED`]: value, ...stateWithoutFinishedType } = state;\n\n      return stateWithoutFinishedType;\n    }\n\n    /*\n     * True if the action is finished and the error property is true.\n     */\n    const isError: boolean = isFinishedRequestType && Boolean(error);\n\n    /*\n     * For any start and finished actions that don't have errors we return the current state.\n     */\n    if (isError === false) {\n      return state;\n    }\n\n    /*\n     * At this point the \"type\" will be a finished action type (e.g. \"SomeAction.REQUEST_*_FINISHED\").\n     * The payload will be a HttpErrorResponseModel.\n     */\n    return {\n      ...state,\n      [type]: payload,\n    };\n  }\n}\n","import ActionUtility from '../../utilities/ActionUtility';\nimport IAction from '../../models/IAction';\nimport ToastStatusEnum from '../../constants/ToastStatusEnum';\nimport IToast from './models/IToast';\nimport uuid from 'uuid/v4';\n\nexport default class ToastsAction {\n  public static readonly ADD_TOAST: string = 'ToastsAction.ADD_TOAST';\n  public static readonly REMOVE_TOAST: string = 'ToastsAction.REMOVE_TOAST';\n\n  public static add(message: string, type: ToastStatusEnum): IAction<IToast> {\n    return ActionUtility.createAction(ToastsAction.ADD_TOAST, {\n      message,\n      type,\n      id: uuid(),\n    });\n  }\n\n  public static removeById(toastId: string): IAction<string> {\n    return ActionUtility.createAction(ToastsAction.REMOVE_TOAST, toastId);\n  }\n}\n","import IToastsState from './models/IToastsState';\nimport ToastsAction from './ToastsAction';\nimport BaseReducer from '../../utilities/BaseReducer';\nimport IAction from '../../models/IAction';\nimport IToast from './models/IToast';\n\nexport default class ToastsReducer extends BaseReducer<IToastsState> {\n  public readonly initialState: IToastsState = {\n    items: [],\n  };\n\n  public [ToastsAction.ADD_TOAST](state: IToastsState, action: IAction<IToast>): IToastsState {\n    return {\n      ...state,\n      items: [...state.items, action.payload!],\n    };\n  }\n\n  public [ToastsAction.REMOVE_TOAST](state: IToastsState, action: IAction<string>): IToastsState {\n    const toastId: string = action.payload!;\n\n    return {\n      ...state,\n      items: state.items.filter((model: IToast) => model.id !== toastId),\n    };\n  }\n}\n","enum ToastStatusEnum {\n  Error = 'error',\n  Warning = 'warning',\n  Success = 'success',\n}\n\nexport default ToastStatusEnum;\n","enum RouteEnum {\n  Home = '/',\n  Episodes = '/episodes',\n  About = '/about',\n}\n\nexport default RouteEnum;\n","import { Dispatch, Middleware, MiddlewareAPI } from 'redux';\nimport IStore from '../models/IStore';\nimport IAction from '../models/IAction';\nimport IError from '../models/IError';\nimport ToastStatusEnum from '../constants/ToastStatusEnum';\nimport ToastsAction from '../stores/toasts/ToastsAction';\n\nconst errorToastMiddleware = (): Middleware => (store: MiddlewareAPI<Dispatch, IStore>) => (next: Dispatch) => (action: IAction<any>): void => {\n  if (action.error) {\n    const errorAction = action as Required<IAction<IError>>;\n\n    next(ToastsAction.add(errorAction.payload.message, ToastStatusEnum.Error));\n  }\n\n  next(action);\n};\n\nexport default errorToastMiddleware;\n","import { applyMiddleware, createStore, Middleware, Store } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction';\nimport { routerMiddleware } from 'connected-react-router';\nimport { History } from 'history';\nimport reduxFreeze from 'redux-freeze';\nimport environment from 'environment';\nimport rootReducer from './rootReducer';\nimport IStore from '../models/IStore';\nimport errorToastMiddleware from '../middlewares/errorToastMiddleware';\n\nexport default (initialState: Partial<IStore>, history: History): Store<IStore> => {\n  const middleware: Middleware[] = [environment.isDevelopment ? reduxFreeze : null!, thunk, routerMiddleware(history), errorToastMiddleware()].filter(\n    Boolean\n  );\n\n  const store: Store<IStore> = createStore(rootReducer(history), initialState, composeWithDevTools(applyMiddleware(...middleware)));\n\n  // store.subscribe(() => console.log(store.getState()));\n\n  return store;\n};\n","import { combineReducers, Reducer, ReducersMapObject } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport { History } from 'history';\nimport IStore from '../models/IStore';\nimport ShowsReducer from './shows/ShowsReducer';\nimport RequestingReducer from './requesting/RequestingReducer';\nimport ErrorReducer from './error/ErrorReducer';\nimport ToastsReducer from './toasts/ToastsReducer';\n\nexport default (history: History): Reducer<IStore> => {\n  const reducerMap: ReducersMapObject<IStore> = {\n    error: ErrorReducer.reducer,\n    requesting: RequestingReducer.reducer,\n    router: connectRouter(history) as any,\n    shows: new ShowsReducer().reducer,\n    toasts: new ToastsReducer().reducer,\n  };\n\n  return combineReducers(reducerMap);\n};\n","import { NavLink, NavLinkProps } from 'react-router-dom';\nimport React from 'react';\n\nconst MenuNavLink = (props: NavLinkProps): JSX.Element => {\n  return <NavLink exact={true} {...props} activeClassName=\"active\" />;\n};\n\nexport default MenuNavLink;\n","import React from 'react';\nimport { Menu, Segment } from 'semantic-ui-react';\nimport MenuNavLink from './components/MenuNavLink';\nimport RouteEnum from '../../../constants/RouteEnum';\n\ninterface IProps {}\ninterface IState {}\n\nexport default class MainNav extends React.PureComponent<IProps, IState> {\n  public render(): JSX.Element {\n    return (\n      <Segment inverted={true}>\n        <Menu inverted={true} pointing={true} secondary={true}>\n          <Menu.Item as={MenuNavLink} to={RouteEnum.Home} name=\"Home\" />\n          <Menu.Item as={MenuNavLink} to={RouteEnum.Episodes} name=\"Episodes\" />\n          <Menu.Item as={MenuNavLink} to={RouteEnum.About} name=\"About\" />\n        </Menu>\n      </Segment>\n    );\n  }\n}\n","// import styles from './ToastCard.module.scss';\n\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport IStore from '../../../models/IStore';\nimport { ReduxProps } from '../../../models/ReduxProps';\nimport { Button, ButtonProps, Card, SemanticCOLORS } from 'semantic-ui-react';\nimport ToastStatusEnum from '../../../constants/ToastStatusEnum';\nimport IToast from '../../../stores/toasts/models/IToast';\nimport ToastsAction from '../../../stores/toasts/ToastsAction';\n\ninterface IProps {\n  readonly item: IToast;\n}\ninterface IState {}\ninterface IStateToProps {}\n\nconst mapStateToProps = (state: IStore, ownProps: IProps): IStateToProps => ({});\n\nclass ToastCard extends React.Component<IProps & IStateToProps & ReduxProps<any>, IState> {\n  public buttonColorMap: Record<ToastStatusEnum, SemanticCOLORS> = {\n    [ToastStatusEnum.Error]: 'red',\n    [ToastStatusEnum.Warning]: 'orange',\n    [ToastStatusEnum.Success]: 'green',\n  };\n\n  public render(): JSX.Element {\n    const { item } = this.props;\n    const buttonColor: SemanticCOLORS = this.buttonColorMap[item.type];\n\n    return (\n      <Card>\n        <Card.Content>\n          <Card.Header content={item.type} />\n          <Card.Description content={item.message} />\n        </Card.Content>\n        <Card.Content extra={true}>\n          <Button color={buttonColor} onClick={this._onClickRemoveNotification}>\n            Close\n          </Button>\n        </Card.Content>\n      </Card>\n    );\n  }\n\n  private _onClickRemoveNotification = (event: React.MouseEvent<HTMLButtonElement>, data: ButtonProps): void => {\n    this.props.dispatch(ToastsAction.removeById(this.props.item.id));\n  };\n}\n\nexport { ToastCard as Unconnected };\nexport default connect(mapStateToProps)(ToastCard);\n","import styles from './Toasts.module.scss';\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { ReduxProps } from '../../../models/ReduxProps';\nimport IStore from '../../../models/IStore';\nimport IToast from '../../../stores/toasts/models/IToast';\nimport ToastCard from '../toast-card/ToastCard';\n\ninterface IProps {}\ninterface IState {}\ninterface IStateToProps {\n  readonly toasts: IToast[];\n}\n\nconst mapStateToProps = (state: IStore, ownProps: IProps): IStateToProps => ({\n  toasts: state.toasts.items,\n});\n\nclass Toasts extends React.Component<IProps & IStateToProps & ReduxProps<any>, IState> {\n  public render(): JSX.Element | null {\n    const { toasts } = this.props;\n\n    if (toasts.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className={styles.wrapper}>\n        {toasts.map((model: IToast) => (\n          <ToastCard key={model.id} item={model} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport { Toasts as Unconnected };\nexport default connect(mapStateToProps)(Toasts);\n","import React, { Suspense, lazy } from 'react';\nimport { History } from 'history';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Route, Switch } from 'react-router-dom';\nimport { Dispatch } from 'redux';\nimport IAction from '../models/IAction';\nimport RouteEnum from '../constants/RouteEnum';\nimport MainNav from './components/main-nav/MainNav';\nimport LoadingIndicator from './components/loading-indicator/LoadingIndicator';\nimport Toasts from './components/toasts/Toasts';\n\nconst HomePage = lazy(() => import('./home-page/HomePage'));\nconst NotFoundPage = lazy(() => import('./not-found-page/NotFoundPage'));\nconst EpisodesPage = lazy(() => import('./episodes-page/EpisodesPage'));\nconst AboutPage = lazy(() => import('./about-page/AboutPage'));\n\ninterface IProps {\n  readonly history: History;\n  readonly dispatch: Dispatch<IAction<any>>;\n}\ninterface IState {}\n\nexport default class App extends React.Component<IProps, IState> {\n  public render(): JSX.Element {\n    return (\n      <ConnectedRouter history={this.props.history}>\n        <Suspense fallback={<LoadingIndicator isActive={true} />}>\n          <MainNav />\n          <Switch>\n            <Route exact={true} path={RouteEnum.Home} component={HomePage} />\n            <Route path={RouteEnum.Episodes} component={EpisodesPage} />\n            <Route path={RouteEnum.About} component={AboutPage} />\n            <Route component={NotFoundPage} />\n          </Switch>\n          <Toasts />\n        </Suspense>\n      </ConnectedRouter>\n    );\n  }\n}\n","import './index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Store } from 'redux';\nimport { Provider } from 'react-redux';\nimport { createBrowserHistory, History } from 'history';\nimport IStore from './models/IStore';\nimport rootStore from './stores/rootStore';\nimport App from './views/App';\nimport environment from 'environment';\n\n(async (window: Window): Promise<void> => {\n  const initialState: Partial<IStore> = {};\n  const history: History = createBrowserHistory({ basename: environment.route.baseRoute });\n  const store: Store<IStore> = rootStore(initialState, history);\n\n  const rootEl: HTMLElement | null = document.getElementById('root');\n\n  const render = (Component: typeof App, el: HTMLElement | null): void => {\n    ReactDOM.render(\n      <Provider store={store}>\n        <Component history={history} dispatch={store.dispatch} />\n      </Provider>,\n      el\n    );\n  };\n\n  render(App, rootEl);\n})(window);\n","import uuid from 'uuid/v4';\nimport IError from './IError';\n\nexport default class HttpErrorResponseModel implements IError {\n  public readonly id: string = uuid();\n  public status: number = 0;\n  public message: string = '';\n  public errors: string[] = [];\n  public url: string = '';\n  public raw: any = null;\n}\n","import environment from './base';\n\n/*\n * base.ts is the default environment for production.\n * You shouldn't have override anything.\n */\n\nconst baseApi = 'https://api.tvmaze.com';\nconst env = environment(baseApi);\n\nexport default {\n  ...env,\n  route: {\n    ...env.route,\n    baseRoute: '/react-redux-architecture', // Fixes issue with Github Pages\n  },\n};\n","/*\n * Base is the default environment for production.\n * Add everything here and override value in other files if needed.\n */\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport default function(baseApi: string) {\n  return {\n    route: {\n      baseRoute: '',\n    },\n    api: {\n      shows: `${baseApi}/shows/:showId`,\n      episodes: `${baseApi}/shows/:showId/episodes`,\n      cast: `${baseApi}/shows/:showId/cast`,\n      errorExample: 'https://httpstat.us/520',\n    },\n    isProduction: true,\n    isDevelopment: false,\n  };\n}\n","import axios, { AxiosRequestConfig, AxiosResponse, Method } from 'axios';\nimport HttpErrorResponseModel from '../models/HttpErrorResponseModel';\nimport { oc } from 'ts-optchain';\n\nexport enum RequestMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Delete = 'DELETE',\n  Options = 'OPTIONS',\n  Head = 'HEAD',\n  Patch = 'PATCH',\n}\n\nexport default class HttpUtility {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  public static async get(endpoint: string, params?: any, requestConfig?: AxiosRequestConfig): Promise<AxiosResponse | HttpErrorResponseModel> {\n    const paramsConfig: AxiosRequestConfig | undefined = params ? { params } : undefined;\n\n    return HttpUtility._request(\n      {\n        url: endpoint,\n        method: RequestMethod.Get,\n      },\n      {\n        ...paramsConfig,\n        ...requestConfig,\n      }\n    );\n  }\n\n  public static async post(endpoint: string, data?: any): Promise<AxiosResponse | HttpErrorResponseModel> {\n    const config: AxiosRequestConfig | undefined = data ? { data } : undefined;\n\n    return HttpUtility._request(\n      {\n        url: endpoint,\n        method: RequestMethod.Post,\n      },\n      config\n    );\n  }\n\n  public static async put(endpoint: string, data?: any): Promise<AxiosResponse | HttpErrorResponseModel> {\n    const config: AxiosRequestConfig | undefined = data ? { data } : undefined;\n\n    return HttpUtility._request(\n      {\n        url: endpoint,\n        method: RequestMethod.Put,\n      },\n      config\n    );\n  }\n\n  public static async delete(endpoint: string): Promise<AxiosResponse | HttpErrorResponseModel> {\n    return HttpUtility._request({\n      url: endpoint,\n      method: RequestMethod.Delete,\n    });\n  }\n\n  private static async _request(restRequest: Partial<Request>, config?: AxiosRequestConfig): Promise<AxiosResponse | HttpErrorResponseModel> {\n    if (!Boolean(restRequest.url)) {\n      console.error(`Received ${restRequest.url} which is invalid for a endpoint url`);\n    }\n\n    try {\n      const axiosRequestConfig: AxiosRequestConfig = {\n        ...config,\n        method: restRequest.method as Method,\n        url: restRequest.url,\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          ...oc(config).headers(undefined),\n        },\n      };\n      const [axiosResponse] = await Promise.all([axios(axiosRequestConfig), HttpUtility._delay()]);\n\n      const { status, data, request } = axiosResponse;\n\n      if (data.success === false) {\n        return HttpUtility._fillInErrorWithDefaults(\n          {\n            status,\n            message: data.errors.join(' - '),\n            errors: data.errors,\n            url: request ? request.responseURL : restRequest.url,\n            raw: axiosResponse,\n          },\n          restRequest\n        );\n      }\n\n      return {\n        ...axiosResponse,\n      };\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code that falls out of the range of 2xx\n        const { status, statusText, data } = error.response;\n        const errors: string[] = data.hasOwnProperty('errors') ? [statusText, ...data.errors] : [statusText];\n\n        return HttpUtility._fillInErrorWithDefaults(\n          {\n            status,\n            message: errors.filter(Boolean).join(' - '),\n            errors,\n            url: error.request.responseURL,\n            raw: error.response,\n          },\n          restRequest\n        );\n      } else if (error.request) {\n        // The request was made but no response was received `error.request` is an instance of XMLHttpRequest in the browser and an instance of http.ClientRequest in node.js\n        const { status, statusText, responseURL } = error.request;\n\n        return HttpUtility._fillInErrorWithDefaults(\n          {\n            status,\n            message: statusText,\n            errors: [statusText],\n            url: responseURL,\n            raw: error.request,\n          },\n          restRequest\n        );\n      }\n\n      // Something happened in setting up the request that triggered an Error\n      return HttpUtility._fillInErrorWithDefaults(\n        {\n          status: 0,\n          message: error.message,\n          errors: [error.message],\n          url: restRequest.url!,\n          raw: error,\n        },\n        restRequest\n      );\n    }\n  }\n\n  private static _fillInErrorWithDefaults(error: Partial<HttpErrorResponseModel>, request: Partial<Request>): HttpErrorResponseModel {\n    const model = new HttpErrorResponseModel();\n\n    model.status = error.status || 0;\n    model.message = error.message || 'Error requesting data';\n    model.errors = error.errors!.length ? error.errors! : ['Error requesting data'];\n    model.url = error.url || request.url!;\n    model.raw = error.raw;\n\n    // Remove anything with undefined or empty strings.\n    model.errors = model.errors.filter(Boolean);\n\n    return model;\n  }\n\n  /**\n   * We want to show the loading indicator to the user but sometimes the api\n   * request finished too quickly. This makes sure there the loading indicator is\n   * visual for at least a given time.\n   *\n   * @param duration\n   * @returns {Promise<unknown>}\n   * @private\n   */\n  private static _delay(duration: number = 250): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, duration));\n  }\n}\n","import { BaseModel } from 'sjs-base-model';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"name\": \"United States\",\n      \"code\": \"US\",\n      \"timezone\": \"America/New_York\"\n    }\n */\nexport default class CountryModel extends BaseModel {\n  public readonly name: string = '';\n  public readonly code: string = '';\n  public readonly timezone: string = '';\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: Partial<CountryModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import { BaseModel } from 'sjs-base-model';\nimport CountryModel from './CountryModel';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"id\": 20,\n      \"name\": \"AMC\",\n      \"country\": {\n        \"name\": \"United States\",\n        \"code\": \"US\",\n        \"timezone\": \"America/New_York\"\n      }\n    }\n */\nexport default class NetworkModel extends BaseModel {\n  public readonly id: number = 0;\n  public readonly name: string = '';\n  public readonly country: CountryModel = CountryModel as any;\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: Partial<NetworkModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import { BaseModel } from 'sjs-base-model';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"medium\": \"http://static.tvmaze.com/uploads/images/medium_portrait/0/526.jpg\",\n      \"original\": \"http://static.tvmaze.com/uploads/images/original_untouched/0/526.jpg\"\n    }\n */\nexport default class ImageModel extends BaseModel {\n  public readonly medium: string = '';\n  public readonly original: string = '';\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: Partial<ImageModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import { BaseModel } from 'sjs-base-model';\nimport NetworkModel from './NetworkModel';\nimport ImageModel from '../ImageModel';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"id\": 74,\n      \"url\": \"http://www.tvmaze.com/shows/74/hell-on-wheels\",\n      \"name\": \"Hell on Wheels\",\n      \"type\": \"Scripted\",\n      \"language\": \"English\",\n      \"genres\": [\n        \"Drama\",\n        \"Action\",\n        \"Western\"\n      ],\n      \"status\": \"Ended\",\n      \"runtime\": 60,\n      \"premiered\": \"2011-11-06\",\n      \"officialSite\": \"http://www.amctv.com/shows/hell-on-wheels\",\n      \"schedule\": {\n        \"time\": \"21:00\",\n        \"days\": [\n          \"Saturday\"\n        ]\n      },\n      \"rating\": {\n        \"average\": 8.5\n      },\n      \"weight\": 82,\n      \"network\": {\n        \"id\": 20,\n        \"name\": \"AMC\",\n        \"country\": {\n          \"name\": \"United States\",\n          \"code\": \"US\",\n          \"timezone\": \"America/New_York\"\n        }\n      },\n      \"webChannel\": null,\n      \"externals\": {\n        \"tvrage\": 27195,\n        \"thetvdb\": 212961,\n        \"imdb\": \"tt1699748\"\n      },\n      \"image\": {\n        \"medium\": \"http://static.tvmaze.com/uploads/images/medium_portrait/0/526.jpg\",\n        \"original\": \"http://static.tvmaze.com/uploads/images/original_untouched/0/526.jpg\"\n      },\n      \"summary\": \"<p><b>Hell on Wheels</b> is an American Western television series about the construction of the First Transcontinental Railroad across the United States. The series follows the Union Pacific Railroad and its surveyors, laborers, prostitutes, mercenaries, and others who lived, worked and died in the mobile encampment called \\\"Hell on Wheels\\\" that followed the railhead west across the Great Plains. In particular, the story focuses on Cullen Bohannon, a former Confederate soldier who, while working as foreman and chief engineer on the railroad, initially attempts to track down the Union soldiers who murdered his wife and young son during the American Civil War.</p>\",\n      \"updated\": 1560886410,\n      \"_links\": {\n        \"self\": {\n          \"href\": \"http://api.tvmaze.com/shows/74\"\n        },\n        \"previousepisode\": {\n          \"href\": \"http://api.tvmaze.com/episodes/862325\"\n        }\n      }\n    }\n */\nexport default class ShowModel extends BaseModel {\n  public readonly id: number = 0;\n  public readonly name: string = '';\n  public readonly summary: string = '';\n  public readonly genres: string[] = [];\n  public readonly network: NetworkModel = NetworkModel as any;\n  public readonly image: ImageModel = ImageModel as any;\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: Partial<ShowModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import { BaseModel } from 'sjs-base-model';\nimport ImageModel from '../ImageModel';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"id\": 4155,\n      \"url\": \"http://www.tvmaze.com/episodes/4155/hell-on-wheels-1x01-pilot\",\n      \"name\": \"Pilot\",\n      \"season\": 1,\n      \"number\": 1,\n      \"airdate\": \"2011-11-06\",\n      \"airtime\": \"22:00\",\n      \"airstamp\": \"2011-11-07T03:00:00+00:00\",\n      \"runtime\": 60,\n      \"image\": {\n        \"medium\": \"http://static.tvmaze.com/uploads/images/medium_landscape/9/22633.jpg\",\n        \"original\": \"http://static.tvmaze.com/uploads/images/original_untouched/9/22633.jpg\"\n      },\n      \"summary\": \"<p>A Western about a former Confederate soldier (Anson Mount) and his quest for revenge on the Union troops who killed his wife. In the premiere episode, he heads west to take a job helping to construct the first transcontinental railroad.</p>\",\n      \"_links\": {\n        \"self\": {\n          \"href\": \"http://api.tvmaze.com/episodes/4155\"\n        }\n      }\n    }\n */\nexport default class EpisodeModel extends BaseModel {\n  public readonly id: number = 0;\n  public readonly season: number = 0;\n  public readonly number: number = 0;\n  public readonly name: string = '';\n  public readonly airdate: string = '';\n  public readonly image: ImageModel = ImageModel as any;\n  public readonly summary: string = '';\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: Partial<EpisodeModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import { BaseModel } from 'sjs-base-model';\nimport ImageModel from '../ImageModel';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"id\": 10709,\n      \"url\": \"http://www.tvmaze.com/people/10709/anson-mount\",\n      \"name\": \"Anson Mount\",\n      \"country\": {\n        \"name\": \"United States\",\n        \"code\": \"US\",\n        \"timezone\": \"America/New_York\"\n      },\n      \"birthday\": \"1973-02-25\",\n      \"deathday\": null,\n      \"gender\": \"Male\",\n      \"image\": {\n        \"medium\": \"http://static.tvmaze.com/uploads/images/medium_portrait/0/2326.jpg\",\n        \"original\": \"http://static.tvmaze.com/uploads/images/original_untouched/0/2326.jpg\"\n      },\n      \"_links\": {\n        \"self\": {\n          \"href\": \"http://api.tvmaze.com/people/10709\"\n        }\n      }\n    }\n */\nexport default class PersonModel extends BaseModel {\n  public readonly id: number = 0;\n  public readonly name: string = '';\n  public readonly birthday: string = '';\n  public readonly image: ImageModel = ImageModel as any;\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: Partial<PersonModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import { BaseModel } from 'sjs-base-model';\nimport ImageModel from '../ImageModel';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"id\": 11320,\n      \"url\": \"http://www.tvmaze.com/characters/11320/hell-on-wheels-cullen-bohannon\",\n      \"name\": \"Cullen Bohannon\",\n      \"image\": {\n        \"medium\": \"http://static.tvmaze.com/uploads/images/medium_portrait/3/9064.jpg\",\n        \"original\": \"http://static.tvmaze.com/uploads/images/original_untouched/3/9064.jpg\"\n      },\n      \"_links\": {\n        \"self\": {\n          \"href\": \"http://api.tvmaze.com/characters/11320\"\n        }\n      }\n    }\n */\nexport default class CharacterModel extends BaseModel {\n  public readonly id: number = 0;\n  public readonly name: string = '';\n  public readonly image: ImageModel = ImageModel as any;\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: Partial<CharacterModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import { BaseModel } from 'sjs-base-model';\nimport PersonModel from './PersonModel';\nimport CharacterModel from './CharacterModel';\n\n/*\n    // Returned Api Data Sample\n    {\n      \"person\": {},\n      \"character\": {},\n      \"self\": false,\n      \"voice\": false\n    }\n */\nexport default class CastModel extends BaseModel {\n  public readonly person: PersonModel = PersonModel as any;\n  public readonly character: CharacterModel = CharacterModel as any;\n  public readonly self: boolean = false;\n  public readonly voice: boolean = false;\n\n  /*\n   * Client-Side properties (Not from API)\n   */\n  // public noneApiProperties: unknown = null;\n\n  constructor(data: Partial<CastModel>) {\n    super();\n\n    this.update(data);\n  }\n}\n","import { IConstructor } from '../models/IConstructor';\nimport HttpErrorResponseModel from '../models/HttpErrorResponseModel';\nimport { AxiosResponse } from 'axios';\nimport HttpUtility from './HttpUtility';\n\ntype FlattenIfArray<T> = T extends (infer R)[] ? R : T;\ntype SingleItemOrArray<T> = T extends [] ? T[] : T;\n\nexport default class EffectUtility {\n  public static async getToModel<T>(\n    Model: IConstructor<FlattenIfArray<T>>,\n    endpoint: string,\n    params?: any\n  ): Promise<SingleItemOrArray<T> | HttpErrorResponseModel> {\n    const response: AxiosResponse | HttpErrorResponseModel = await HttpUtility.get(endpoint, params);\n\n    return EffectUtility._restModelCreator<T>(Model, response);\n  }\n\n  public static async postToModel<T>(\n    Model: IConstructor<FlattenIfArray<T>>,\n    endpoint: string,\n    data?: any\n  ): Promise<SingleItemOrArray<T> | HttpErrorResponseModel> {\n    const response: AxiosResponse | HttpErrorResponseModel = await HttpUtility.post(endpoint, data);\n\n    return EffectUtility._restModelCreator<T>(Model, response);\n  }\n\n  private static _restModelCreator<T>(\n    Model: IConstructor<FlattenIfArray<T>>,\n    response: AxiosResponse | HttpErrorResponseModel\n  ): SingleItemOrArray<T> | HttpErrorResponseModel {\n    if (response instanceof HttpErrorResponseModel) {\n      return response;\n    }\n\n    return !Array.isArray(response.data) ? new Model(response.data) : (response.data.map((json) => new Model(json)) as any);\n  }\n}\n","import environment from 'environment';\nimport HttpErrorResponseModel from '../../models/HttpErrorResponseModel';\nimport HttpUtility from '../../utilities/HttpUtility';\nimport ShowModel from './models/shows/ShowModel';\nimport EpisodeModel from './models/episodes/EpisodeModel';\nimport CastModel from './models/cast/CastModel';\nimport { AxiosResponse } from 'axios';\nimport EffectUtility from '../../utilities/EffectUtility';\n\nexport default class ShowsEffect {\n  public static async requestShow(showId: string): Promise<ShowModel | HttpErrorResponseModel> {\n    const endpoint: string = environment.api.shows.replace(':showId', showId);\n\n    return EffectUtility.getToModel<ShowModel>(ShowModel, endpoint);\n  }\n\n  public static async requestEpisodes(showId: string): Promise<EpisodeModel[] | HttpErrorResponseModel> {\n    const endpoint: string = environment.api.episodes.replace(':showId', showId);\n\n    return EffectUtility.getToModel<EpisodeModel[]>(EpisodeModel, endpoint);\n  }\n\n  public static async requestCast(showId: string): Promise<CastModel[] | HttpErrorResponseModel> {\n    const endpoint: string = environment.api.cast.replace(':showId', showId);\n\n    // Below is just to show you what the above \"requestEpisodes\" method is doing with \"EffectUtility.getToModel\".\n    // In your application you can change this to match the \"requestEpisodes\" method.\n    const response: AxiosResponse | HttpErrorResponseModel = await HttpUtility.get(endpoint);\n\n    if (response instanceof HttpErrorResponseModel) {\n      return response;\n    }\n\n    return response.data.map((json: Partial<CastModel>) => new CastModel(json));\n  }\n\n  /**\n   * This is only to trigger an error api response so we can use it for an example in the AboutPage\n   */\n  public static async requestError(): Promise<any | HttpErrorResponseModel> {\n    const endpoint: string = environment.api.errorExample;\n    const response: AxiosResponse | HttpErrorResponseModel = await HttpUtility.get(endpoint);\n\n    if (response instanceof HttpErrorResponseModel) {\n      return response;\n    }\n\n    return response.data;\n  }\n}\n","import ShowsEffect from './ShowsEffect';\nimport HttpErrorResponseModel from '../../models/HttpErrorResponseModel';\nimport ActionUtility from '../../utilities/ActionUtility';\nimport { ReduxDispatch } from '../../models/ReduxProps';\nimport IStore from '../../models/IStore';\nimport ShowModel from './models/shows/ShowModel';\nimport EpisodeModel from './models/episodes/EpisodeModel';\nimport CastModel from './models/cast/CastModel';\n\ntype ActionUnion = undefined | HttpErrorResponseModel | ShowModel | EpisodeModel[] | CastModel[];\n\nexport default class ShowsAction {\n  public static readonly REQUEST_SHOW: string = 'ShowsAction.REQUEST_SHOW';\n  public static readonly REQUEST_SHOW_FINISHED: string = 'ShowsAction.REQUEST_SHOW_FINISHED';\n\n  public static readonly REQUEST_EPISODES: string = 'ShowsAction.REQUEST_EPISODES';\n  public static readonly REQUEST_EPISODES_FINISHED: string = 'ShowsAction.REQUEST_EPISODES_FINISHED';\n\n  public static readonly REQUEST_CAST: string = 'ShowsAction.REQUEST_CAST';\n  public static readonly REQUEST_CAST_FINISHED: string = 'ShowsAction.REQUEST_CAST_FINISHED';\n\n  public static readonly REQUEST_ERROR: string = 'ShowsAction.REQUEST_ERROR';\n  public static readonly REQUEST_ERROR_FINISHED: string = 'ShowsAction.REQUEST_ERROR_FINISHED';\n\n  public static requestShow(): any {\n    return async (dispatch: ReduxDispatch<ActionUnion>, getState: () => IStore): Promise<void> => {\n      const showId: string = getState().shows.currentShowId;\n\n      await ActionUtility.createThunkEffect<ShowModel>(dispatch, ShowsAction.REQUEST_SHOW, ShowsEffect.requestShow, showId);\n    };\n  }\n\n  public static requestEpisodes(): any {\n    return async (dispatch: ReduxDispatch<ActionUnion>, getState: () => IStore): Promise<void> => {\n      const showId: string = getState().shows.currentShowId;\n\n      await ActionUtility.createThunkEffect<EpisodeModel[]>(dispatch, ShowsAction.REQUEST_EPISODES, ShowsEffect.requestEpisodes, showId);\n    };\n  }\n\n  public static requestCast(): any {\n    return async (dispatch: ReduxDispatch<ActionUnion>, getState: () => IStore): Promise<void> => {\n      const showId: string = getState().shows.currentShowId;\n\n      await ActionUtility.createThunkEffect<CastModel[]>(dispatch, ShowsAction.REQUEST_CAST, ShowsEffect.requestCast, showId);\n    };\n  }\n\n  public static requestError(): any {\n    return async (dispatch: ReduxDispatch<ActionUnion>, getState: () => IStore): Promise<void> => {\n      await ActionUtility.createThunkEffect<any>(dispatch, ShowsAction.REQUEST_ERROR, ShowsEffect.requestError);\n    };\n  }\n}\n"],"sourceRoot":""}